//
//  NewsfeedViewController.swift
//  VkNewsFeed
//
//  Created by Иван Абрамов on 02.09.2020.
//  Copyright (c) 2020 Иван Абрамов. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SkeletonView

protocol NewsfeedDisplayLogic: class {
    func displayModel(viewModel: Model.ViewModel.ViewModelData)
}

class NewsfeedViewController: UIViewController, NewsfeedDisplayLogic, ShowMoreButtonDelegate, TitleViewDelegate {
   
  var interactor: NewsfeedBusinessLogic?
  var router: (NSObjectProtocol & NewsfeedRoutingLogic)?

    @IBOutlet weak var table: UITableView!
    
    private var titleView: TitleView?
    private var contentOffset: CGPoint?
    private lazy var footerView = FooterView()
    private var feedViewModel = FeedViewModel.init(cells: [], footerTitle: nil)
    private var refreshControl : UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(refreshNews), for: .valueChanged)
        return refreshControl
    }()
    
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = NewsfeedInteractor()
    let presenter = NewsfeedPresenter()
    let router = NewsfeedRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setup()
    
    
    
    //DispatchQueue.main.async {
    //    self.startAnimations()
    //}
    
    setupTableView()
    setupTopBar()
    
    DispatchQueue.main.async {
        self.startAnimations()
    }
//    startAnimations()
    
    interactor?.makeRequest(request: .getNewsFeed)
    interactor?.makeRequest(request: .getUser)
    
    view.backgroundColor = .systemBackground
  }
  
  
    func displayModel(viewModel: Model.ViewModel.ViewModelData) {
        switch viewModel {
        case .displayNewsFeed(model: let model):
            self.feedViewModel = model
//
            DispatchQueue.main.async {
                self.stopAnimations()
                
                self.footerView.stopAndSet(title: model.footerTitle ?? "")
                self.table.reloadData()
                self.refreshControl.endRefreshing()
            }
        case .displayUser(model: let model):
            self.titleView?.set(user: model)
        case .displayFooterView:
            footerView.showLoader()
        }
    }
}

extension NewsfeedViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return feedViewModel.cells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: NewsfeedTableViewCell.cellId, for: indexPath) as! NewsfeedTableViewCell
        
        cell.set(viewModel: feedViewModel.cells[indexPath.row])
        cell.showMoreButtonDelegate = self
        
        cell.hideSkeleton()
        cell.stopSkeletonAnimation()
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let cellViewModel  = feedViewModel.cells[indexPath.row]
        
        return cellViewModel.sizes.totalHeight
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        let cellViewModel  = feedViewModel.cells[indexPath.row]
        
        return 650 //cellViewModel.sizes.totalHeight
    }
    
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if scrollView.contentOffset.y > scrollView.contentSize.height / 1.1 {
            interactor?.makeRequest(request: .getOldFeed)
        }
    }
    
//    MARK:- Swipe actions
    
    func tableView(_ tableView: UITableView,
                      trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
       {
        
        // Repost action
        
        let repostAction = UIContextualAction(style: .normal, title:  "Repost", handler: { (ac : UIContextualAction, view : UIView, success : (Bool) -> Void) in

               success(true)
        })
        
        repostAction.backgroundColor = .orange
        repostAction.image  = UIImage(named: "repost")
        
           return UISwipeActionsConfiguration(actions: [repostAction])
       }
    
    
    func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        
           let likeAction = UIContextualAction(style: .normal, title:  "Like", handler: { (ac : UIContextualAction, view : UIView, success : (Bool) -> Void) in
               success(true)
           })
    
        
            likeAction.image = UIImage(named: "like")
            likeAction.backgroundColor = .systemRed
                    
        

            return UISwipeActionsConfiguration(actions: [likeAction])
    }
    
    func setupTableView() {
        table.register(UINib(nibName: "NewsfeedTableViewCell", bundle: nil), forCellReuseIdentifier: NewsfeedTableViewCell.cellId)
        
        table.separatorStyle  = .none
        table.backgroundColor = .clear
        table.keyboardDismissMode = .onDrag
        
        DispatchQueue.main.async {
            self.table.addSubview(self.refreshControl)
            self.table.tableFooterView = self.footerView
            self.footerView.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 60)
            self.footerView.center = CGPoint(x: self.view.center.x, y: 20)
            
            let topBar : UIView = {
                let view = UIView(frame: UIApplication.shared.statusBarFrame)
                view.backgroundColor = .systemBackground
                view.layer.shadowColor = UIColor.gray.cgColor
                view.layer.shadowOpacity = 0.3
                view.layer.shadowRadius = 8
                view.layer.shadowOffset = CGSize(width: 2, height: 2)
                return view
            }()
            
            self.view.addSubview(topBar)
        }
    }
    
    @objc func refreshNews() {
        interactor?.makeRequest(request: .getNewsFeed)
    }
    
//    MARK:- ShowMoreButtonDelegate
    
    func showMoreTextTapped(for cell: NewsfeedTableViewCell) {
        guard let indexPath = table.indexPath(for: cell) else { return }
        let viewModel = feedViewModel.cells[indexPath.row]

        let postId = viewModel.postId

        interactor?.makeRequest(request: .revealPost(id: postId))
    }
    
//    MARK: TopBar
    
    func setupTopBar() {
        self.navigationController?.hidesBarsOnSwipe = true
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.titleView = TitleView(frame: CGRect(x: 0,
                                                 y: 0,
                                                 width: UIScreen.main.bounds.width,
                                                 height: 400))
        self.titleView?.searchDelegate = self
        self.navigationItem.titleView = titleView
    }
    
//  MARK: SearchDelegate
    
    func perfomrNewsearch(withText text: String) {
           print("\nNew search: \(text)\n")
        self.navigationController?.hidesBarsOnSwipe = false
        //self.contentOffset = table.contentOffset
        interactor?.makeRequest(request: .performSearch(text: text))
    }
    
    func cancelSearch() {
        self.navigationController?.hidesBarsOnSwipe = true
        interactor?.makeRequest(request: .cancelSearch)
        //table.contentOffset = self.contentOffset ?? .zero
       }
}

extension NewsfeedViewController: SkeletonTableViewDelegate, SkeletonTableViewDataSource {
    
    func startAnimations() {
        self.table.showAnimatedGradientSkeleton()
    }
    
        func stopAnimations() {
    //        collectionView.prepareSkeleton { _ in
                self.table.stopSkeletonAnimation()
                self.table.hideSkeleton()
    //        }
            
    //        collectionView.stopSkeletonAnimation()
    //        collectionView.hideSkeleton()
        }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
//        self.stopAnimations()
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier {
        return NewsfeedTableViewCell.cellId
    }
    
//    estimatedrow
}

//let cell = tableView.dequeueReusableCell(withIdentifier: NewsfeedTableViewCell.cellId, for: indexPath) as! NewsfeedTableViewCell
